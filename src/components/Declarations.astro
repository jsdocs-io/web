---
import type {
	ExtractedClass,
	ExtractedDeclaration,
	ExtractedEnum,
	ExtractedFunction,
	ExtractedInterface,
	ExtractedNamespace,
	ExtractedTypeAlias,
	ExtractedVariable,
} from "@jsdocs-io/extractor";
import type { DeclarationUrlFn } from "../../lib/declaration-url";
import { shortId } from "../../lib/short-id";
import { type UnpkgUrlFn } from "../../lib/unpkg-url";
import Declaration from "./Declaration.astro";

type Props = {
	containerName: string;
	declarations: ExtractedDeclaration[];
	unpkgUrl: UnpkgUrlFn;
	declarationUrl: DeclarationUrlFn;
};

const { containerName, declarations, unpkgUrl, declarationUrl } = Astro.props;
const variables = declarations.filter((d): d is ExtractedVariable => d.kind === "variable");
const functions = declarations.filter((d): d is ExtractedFunction => d.kind === "function");
const classes = declarations.filter((d): d is ExtractedClass => d.kind === "class");
const interfaces = declarations.filter((d): d is ExtractedInterface => d.kind === "interface");
const enums = declarations.filter((d): d is ExtractedEnum => d.kind === "enum");
const types = declarations.filter((d): d is ExtractedTypeAlias => d.kind === "type");
const namespaces = declarations.filter((d): d is ExtractedNamespace => d.kind === "namespace");
---

{
	variables.length > 0 && (
		<>
			<h2 id={`${containerName}-variables`}>Variables</h2>
			{variables.map((declaration) => (
				<Declaration {declaration} {unpkgUrl} {declarationUrl} />
			))}
		</>
	)
}

{
	functions.length > 0 && (
		<>
			<h2 id={`${containerName}-functions`}>Functions</h2>
			{functions.map((declaration) => (
				<Declaration {declaration} {unpkgUrl} {declarationUrl} />
			))}
		</>
	)
}

{
	classes.length > 0 && (
		<>
			<h2 id={`${containerName}-classes`}>Classes</h2>
			{classes.map((declaration) => (
				<>
					<Declaration {declaration} {unpkgUrl} {declarationUrl} />
					{(declaration.constructors.length > 0 ||
						declaration.properties.length > 0 ||
						declaration.methods.length > 0) && (
						<div class="border-l border-l-base-content/20 pl-6">
							{declaration.constructors.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
							{declaration.properties.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
							{declaration.methods.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
						</div>
					)}
				</>
			))}
		</>
	)
}

{
	interfaces.length > 0 && (
		<>
			<h2 id={`${containerName}-interfaces`}>Interfaces</h2>
			{interfaces.map((declaration) => (
				<>
					<Declaration {declaration} {unpkgUrl} {declarationUrl} />
					{(declaration.properties.length > 0 ||
						declaration.methods.length > 0 ||
						declaration.constructSignatures.length > 0 ||
						declaration.callSignatures.length > 0 ||
						declaration.indexSignatures.length > 0 ||
						declaration.getAccessors.length > 0 ||
						declaration.setAccessors.length > 0) && (
						<div class="border-l border-l-base-content/20 pl-6">
							{declaration.properties.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
							{declaration.methods.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
							{declaration.constructSignatures.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
							{declaration.callSignatures.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
							{declaration.indexSignatures.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
							{declaration.getAccessors.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
							{declaration.setAccessors.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
						</div>
					)}
				</>
			))}
		</>
	)
}

{
	enums.length > 0 && (
		<>
			<h2 id={`${containerName}-enums`}>Enums</h2>
			{enums.map((declaration) => (
				<>
					<Declaration {declaration} {unpkgUrl} {declarationUrl} />
					{declaration.members.length > 0 && (
						<div class="border-l border-l-base-content/20 pl-6">
							{declaration.members.map((declaration) => (
								<Declaration {declaration} {unpkgUrl} {declarationUrl} />
							))}
						</div>
					)}
				</>
			))}
		</>
	)
}

{
	types.length > 0 && (
		<>
			<h2 id={`${containerName}-types`}>Types</h2>
			{types.map((declaration) => (
				<Declaration {declaration} {unpkgUrl} {declarationUrl} />
			))}
		</>
	)
}

{
	namespaces.length > 0 && (
		<>
			<h2 id={`${containerName}-namespaces`}>Namespaces</h2>
			{namespaces.map((declaration) => (
				<>
					<Declaration {declaration} {unpkgUrl} {declarationUrl} />
					{declaration.declarations.length > 0 && (
						<div class="border-l border-l-base-content/20 pl-6">
							<Astro.self
								containerName={shortId(declaration.id)}
								declarations={declaration.declarations}
								{unpkgUrl}
								{declarationUrl}
							/>
						</div>
					)}
				</>
			))}
		</>
	)
}

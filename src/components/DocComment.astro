---
import { parseDocComment } from "@jsdocs-io/extractor";
import { StandardTags } from "@microsoft/tsdoc";
import DocCommentInherit from "./DocCommentInherit.astro";
import DocNodeContainer from "./DocNodeContainer.astro";

type Props = {
	doc: string;
};

const { doc } = Astro.props;
const {
	summarySection,
	params: { blocks: paramsBlocks },
	returnsBlock,
	remarksBlock,
	customBlocks,
	seeBlocks,
	modifierTagSet,
	deprecatedBlock,
	inheritDocTag,
} = parseDocComment(doc);
const throwsBlocks = customBlocks.filter(
	(block) =>
		// Throws blocks are defined by the `@throws` tag.
		block.blockTag.tagNameWithUpperCase === StandardTags.throws.tagNameWithUpperCase,
);
const exampleBlocks = customBlocks.filter(
	(block) =>
		// Example blocks are defined by the `@example` tag.
		block.blockTag.tagNameWithUpperCase === StandardTags.example.tagNameWithUpperCase,
);
const modifierTags = modifierTagSet.nodes.filter(
	(tag) =>
		// Do not display the `@packageDocumentation` tag.
		![StandardTags.packageDocumentation.tagNameWithUpperCase].includes(tag.tagNameWithUpperCase),
);
---

{
	inheritDocTag?.declarationReference && (
		<DocCommentInherit ref={inheritDocTag.declarationReference} />
	)
}

{summarySection && <DocNodeContainer container={summarySection} />}

{
	paramsBlocks.map(({ parameterName, content }) => (
		<>
			<strong>Parameter {parameterName}</strong>
			<DocNodeContainer container={content} />
		</>
	))
}

{
	returnsBlock && (
		<>
			<strong>Returns</strong>
			<DocNodeContainer container={returnsBlock.content} />
		</>
	)
}

{
	throwsBlocks.map(({ content }) => (
		<>
			<strong>Throws</strong>
			<DocNodeContainer container={content} />
		</>
	))
}

{
	remarksBlock && (
		<>
			<strong>Remarks</strong>
			<DocNodeContainer container={remarksBlock.content} />
		</>
	)
}

{
	exampleBlocks.map(({ content }) => (
		<>
			<strong>Example</strong>
			<DocNodeContainer container={content} />
		</>
	))
}

{
	seeBlocks.length > 0 && (
		<>
			<strong>See also</strong>
			<ul>
				{seeBlocks.map(({ content }) => (
					<li>
						<DocNodeContainer container={content} />
					</li>
				))}
			</ul>
		</>
	)
}

{
	modifierTags.length > 0 && (
		<>
			<strong>Modifiers</strong>
			<p>
				{modifierTags.map(({ tagName }, i) => (
					<>
						<code>{tagName}</code>
						{i < modifierTags.length - 1 && ", "}
					</>
				))}
			</p>
		</>
	)
}

{
	deprecatedBlock && (
		<>
			<strong>Deprecated</strong>
			<DocNodeContainer container={deprecatedBlock.content} />
		</>
	)
}
